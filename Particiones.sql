CREATE TABLE Employees(
	Id INT PRIMARY KEY,
	NAME NVARCHAR(50),
	GENDER NVARCHAR(10),
	SALARY INT
)
GO

INSERT INTO Employees VALUES (1, 'Mark', 'Male', 8000)
INSERT INTO Employees VALUES (2, 'John', 'Male', 8000)
INSERT INTO Employees VALUES (3, 'Pam', 'Female', 5000)
INSERT INTO Employees VALUES (4, 'Sara', 'Female', 4000)
INSERT INTO Employees VALUES (5, 'Todd', 'Male', 3500)
INSERT INTO Employees VALUES (6, 'Mary', 'Female', 6000)
INSERT INTO Employees VALUES (7, 'Ben', 'Male', 6500)
INSERT INTO Employees VALUES (8, 'Jodi', 'Female', 4500)
INSERT INTO Employees VALUES (9, 'Tom', 'Male', 7000)
INSERT INTO Employees VALUES (10, 'Ron', 'Male', 6800)
GO

SELECT * FROM Employees
GO
/*Crea dos columnas donde LEAD_2 = Salary - 1 y LEAD_1 = Salary + 1*/
SELECT NAME, GENDER, SALARY,
	LEAD( SALARY ) OVER ( ORDER BY SALARY ) AS LEAD_2,
	LAG( SALARY ) OVER ( ORDER BY SALARY ) AS LAG_1
FROM Employees
/*Cambiando los valores nulos por -1*/
SELECT NAME, GENDER, SALARY,
	LEAD( SALARY, 2, -1 ) OVER ( ORDER BY SALARY ) AS LEAD_2,
	LAG( SALARY, 1, -1 ) OVER ( ORDER BY SALARY ) AS LAG_1
FROM Employees

/*OrdenadO por genero (El iterador toma en cuenta como limite el valor de la columna genero para seguir avanzando en la columna)*/
SELECT NAME, GENDER, SALARY,
	LEAD( SALARY, 2, -1 ) OVER ( PARTITION BY GENDER ORDER BY SALARY ) AS LEAD_2,
	LAG( SALARY, 1, -1 ) OVER ( PARTITION BY GENDER ORDER BY SALARY ) AS LAG_1
FROM Employees

/*Rank*/
SELECT NAME, SALARY, GENDER, 
	   RANK() OVER ( ORDER BY SALARY DESC ) AS RANK, 
	   DENSE_RANK() OVER ( ORDER BY SALARY DESC ) AS DENSERANK
FROM Employees
GO

/*With*/
SELECT * FROM Employees ORDER BY SALARY DESC
GO
/*Obteniendo un elemento segun el rango que queramos*/
WITH RESULT AS (
	SELECT SALARY,
		   DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
	FROM Employees
)
SELECT TOP 1 SALARY FROM RESULT WHERE SALARY_RANK = 2;
GO
/*Segun el Rango y sexo*/
WITH RESULT AS (
	SELECT SALARY, GENDER,
		   DENSE_RANK() OVER (PARTITION BY GENDER ORDER BY SALARY DESC) AS SALARY_RANK
	FROM Employees
)
SELECT TOP 1 SALARY FROM RESULT WHERE SALARY_RANK = 3 AND GENDER = 'Female';
GO

/*Firts Value*/
SELECT NAME, GENDER, SALARY,
	   FIRST_VALUE( NAME ) 
	   OVER ( PARTITION BY GENDER ORDER BY SALARY ) AS FIRST_VALUE
FROM Employees
GO

/*INTILE*/
SELECT NAME, SALARY,
NTILE( 3 ) OVER ( ORDER BY SALARY ) AS NTILE
FROM Employees
GO

SELECT NAME, GENDER, SALARY,
	   LAST_VALUE( NAME ) 
	   OVER( ORDER BY SALARY ROWS 
	   BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS LASTVALUE
FROM Employees
GO
/*ROW NOMBER*/
SELECT ROW_NUMBER() OVER( ORDER BY NAME ASC ) AS ROW#,
	   NAME, recovery_model_desc
FROM SYS.databases
WHERE database_id < 5
GO

SELECT* FROM (

SELECT ROW_NUMBER() OVER( ORDER BY NAME ASC ) AS NUMERO,
			NAME, recovery_model_desc
	   FROM SYS.databases
) AS X
WHERE NUMERO  = 10
GO
/*COUNT AVG MIN MAX*/
SELECT GENDER, COUNT( * ) GENDER_TOTAL, AVG( SALARY ) AS PROM,
		MIN(SALARY) AS MIN_SAL, MAX( SALARY ) AS MAX_SAL
FROM Employees
GROUP BY GENDER